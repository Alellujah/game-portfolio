name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      # Configure GitHub Pages before building
      
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Build
        run: pnpm run build

      - name: Install image optimization tools
        run: |
          sudo apt-get update
          sudo apt-get install -y oxipng jpegoptim

      - name: Optimize PNGs (oxipng)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t PNGS < <(find dist -type f -name '*.png') || true
          if [ ${#PNGS[@]} -gt 0 ]; then
            echo "Optimizing ${#PNGS[@]} PNG files with oxipng..."
            # -o2: level 2, --strip safe: strip metadata, keep color profiles if safe
            printf '%s\0' "${PNGS[@]}" | xargs -0 -n1 -P 2 oxipng -o 2 --strip safe --quiet
          else
            echo "No PNG files found under dist/."
          fi

      - name: Optimize JPEGs (jpegoptim)
        shell: bash
        run: |
          set -euo pipefail
          mapfile -t JPGS < <(find dist -type f \( -name '*.jpg' -o -name '*.jpeg' \)) || true
          if [ ${#JPGS[@]} -gt 0 ]; then
            echo "Optimizing ${#JPGS[@]} JPEG files with jpegoptim..."
            jpegoptim --max=75 --strip-all --all-progressive --quiet "${JPGS[@]}"
          else
            echo "No JPEG files found under dist/."
          fi

      - name: Optimize SVGs (SVGO)
        run: pnpm dlx svgo@latest -r -f dist || true

      - name: List build output (debug)
        run: |
          echo "Built files (top):" && ls -lah dist || true
          echo "Built files (depth 2):" && find dist -maxdepth 2 -type f -print | sort || true

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
